{
  "name": "grunt-requirejs-paths",
  "description": "A helper to create your paths object in main.js for requirejs.",
  "version": "0.1.2",
  "homepage": "https://github.com/pajtai/grunt-requirejs-paths",
  "author": {
    "name": "Peter Ajtai",
    "email": "peter.ajtai@thinksolid.com",
    "url": "http://netlumination.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pajtai/grunt-requirejs-paths"
  },
  "bugs": {
    "url": "https://github.com/pajtai/grunt-requirejs-paths/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/pajtai/grunt-requirejs-paths/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.19"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-release-notes": "^0.1.1",
    "matchdep": "^0.3.0",
    "chai": "~1.9.0",
    "grunt-mocha-test": "~0.9.4"
  },
  "keywords": [
    "gruntplugin",
    "requirejs"
  ],
  "dependencies": {
    "lodash": "^2.4.1"
  },
  "readme": "# grunt-requirejs-paths [![Build Status](https://travis-ci.org/Solid-Interactive/masseuse.png?branch=bower)](https://travis-ci.org/pajtai/grunt-requirejs-paths)\n\n> A helper multitask to create your paths object in main.js for requirejs\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-requirejs-paths --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-requirejs-paths');\n```\n\n## The \"paths\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `paths` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  paths: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n* `pathsJson` - the path or an array of paths to a json file describing part or all of the requirejs paths object. The\njson object is made of key value pairs where the value is a string or on object used to build the paths object.\nYou can nest as much as you want, and keys ending in a `+` a prefixed to nested keys.\n\n    ```javascript\n    {\n        \"example+\" : {\n            \"View\" : \"app/view\"\n        },\n        \"template \" \"text!app/template.html\"\n    }\n\n    // will produce\n    paths : {\n        'exampleView' : 'app/view'\n        'template' : 'text!app/template.html'\n    }\n    ```\n\n    * default : 'paths.json'\n\n* `pathsPrefix` - An optional prefix to be added before each file path. This should allow you to use the same `paths.json`\nfor both regular dev and tests. For example if `app` and `tests` are sibling directories and both have a `main.js` file,\nyou can use `pathsPrefix : '../app/'` for your tests.\n\n* `mainTemplate` - a template file used to generate your `main.js`, inside the template the variable `paths` is the\noutcome from `pathsJson`. Note that the template is put into a comment, so that jshint and syntax highlighting still work.\nWhen the template is processed, the paths object will come on the line after the comment.\n\n    ```javascript\n    // sample usage\n    (function () {\n        'use strict';\n\n        require.config({\n            // < %= paths %>\n        });\n\n        require([\n            'backbone',\n            'routers/router',\n            'guideView'\n        ], function (Backbone, Router, GuideView) {\n            new GuideView().start();\n            new Router();\n            Backbone.history.start();\n        });\n    }());\n    ```\n\n    * default - `main.template.js`\n* `main` - The path to where you want the final version of the main file to go.\n    * default - `main.js`\n\n* `prefixComma` - Whether you want a comma prefixed to your paths object. For example if it comes after `packages`.\n    * default - `false`\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n* 0.0.0 - 2014-03-06 - [initial release](https://github.com/pajtai/grunt-requirejs-paths/tree/master/release_notes/0.0.0_2014-03-06.md)\n* 0.1.0 - 2014-03-06 - [features](https://github.com/pajtai/grunt-requirejs-paths/tree/master/release_notes/0.1.0_2014-03-06.md)\n* 0.1.1 - 2014-03-06 - [patches](https://github.com/pajtai/grunt-requirejs-paths/tree/master/release_notes/0.1.1_2014-03-06.md)\n* 0.1.2 - 2014-03-08 - [patches](https://github.com/pajtai/grunt-requirejs-paths/tree/master/release_notes/0.1.2_2014-03-08.md)\n\n\n_Compiled file. Do not modify directly. Created: 2014-03-08 07:22:55_\n",
  "readmeFilename": "README.md",
  "_id": "grunt-requirejs-paths@0.1.2",
  "_shasum": "989ef30555af2e7bb484eccc93df01f4bfbccc70",
  "_from": "grunt-requirejs-paths@~0.1.1",
  "_resolved": "https://registry.npmjs.org/grunt-requirejs-paths/-/grunt-requirejs-paths-0.1.2.tgz"
}
