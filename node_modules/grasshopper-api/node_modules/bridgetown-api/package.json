{
  "name": "bridgetown-api",
  "description": "Collection of middleware that can be used in combination with express to protect an API. There is also a common API Response module that can be used in all of your API projects.",
  "main": "./lib/bridgetown-api",
  "author": {
    "name": "Travis McHattie"
  },
  "version": "1.0.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/Solid-Interactive/bridgetown-api"
  },
  "bugs": {
    "url": "https://github.com/Solid-Interactive/bridgetown-api/issues"
  },
  "engines": {
    "node": ">=0.10.17",
    "npm": ">=1.3.9"
  },
  "dependencies": {},
  "devDependencies": {
    "matchdep": "~0.3.0",
    "mocha": "~1.16.2",
    "chai": "~1.8.1",
    "supertest": "~0.8.2",
    "grunt": "~0.4.2",
    "q": "~0.9.7",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-shell": "~0.2.2"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "gitHead": "5f53386e86690699f16c1bdaad70fa08488f9503",
  "homepage": "https://github.com/Solid-Interactive/bridgetown-api",
  "_id": "bridgetown-api@1.0.3",
  "_shasum": "4071f695855a6736f61ee944e3ea12efc83bbe21",
  "_from": "bridgetown-api@1.0.3",
  "_npmVersion": "1.4.15",
  "_npmUser": {
    "name": "greglarrenaga",
    "email": "greg.larrenaga@thinksolid.com"
  },
  "maintainers": [
    {
      "name": "travism",
      "email": "travis.mchattie@thinksolid.com"
    },
    {
      "name": "greglarrenaga",
      "email": "greg.larrenaga@thinksolid.com"
    },
    {
      "name": "pajtai",
      "email": "peter.ajtai@thinksolid.com"
    },
    {
      "name": "kaijarayne",
      "email": "kaija.rayne@thinksolid.com"
    }
  ],
  "dist": {
    "shasum": "4071f695855a6736f61ee944e3ea12efc83bbe21",
    "tarball": "http://registry.npmjs.org/bridgetown-api/-/bridgetown-api-1.0.3.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/bridgetown-api/-/bridgetown-api-1.0.3.tgz",
  "readme": "![Bridgetown API](https://s3.amazonaws.com/SolidInteractive/images/bridgetown/bridgetown-api-logo.png)\n\n--------------------------------------------------------------------------------------------------------------\n\n[![Build Status](https://travis-ci.org/Solid-Interactive/bridgetown-api-js.png?branch=master)](https://travis-ci.org/Solid-Interactive/bridgetown-api-js)  - v.1.0.0\n\nAnytime you build applications for the modern web, at some point you will have to build an API. APIs power all of our single page web apps, mobile and entertainment applications as well as integrating systems together on the server side.\n\nEvery time you build an API the same problems have to be solved.\n\n* Application Access (API Key management)\n* Authorization (Authentication header is mandatory)\n* Authentication Token Validation\n* Domain Security\n* Access to Domain Objects\n\nSome of these problems are going to be different for every project but some of them are the same every time. This project is designed to apply the patterns required to facilitate building an API covering the above concepts.\n\nThis project does not have any dependencies and can be used with NodeJS's basic HttpRequest/Response objects but typically we would pair this with [https://github.com/visionmedia/express](Express).\n\nThis library is most useful when using the built in Middleware objects and taking advantage of Express' ability to chain middle ware for a route. Here is a route example:\n\n\n```\nvar middleware = require('bridgetown-api').middleware;\n\napp.get('/resource', [middleware.authorization, routes.resource.get]);\n```\n\nThe above code will check to see if there is an authentication header available. If there is then `routes.resource.get` gets called. If not then an error response comes back.\n\n------------------------------------------------------------------------------------------\n\n## Middleware\n\nThere is a collection of useful middleware that you can use to protect your routes. Here is a typical pattern to grant access to a domain resource.\n\n![Bridgetown API Domain Access](https://s3.amazonaws.com/SolidInteractive/images/bridgetown/bridge-town-middleware.png)\n\n\n### apiKey\n\nIf your API requires an API Key to allow access then you can use this middleware. This middleware requires you to supply a method to validate the API Key. It also checks to make sure that a `x-api-key` is supplied.\n\n\n```\nvar bridgetownApi = require('bridgetown-api'),\n    middleware = bridgetownApi.middleware,\n    q = require('q');\n\nfunction validateApiKey(apiKey){\n    var deferred = q.defer();\n\n    ...Your code to validate the key should go here...\n\n    return deferred.promise;\n}\n\nbridgetownApi.configure(function(){\n    this.validate.apiKey(validateApiKey);\n});\n\napp.get('/resource', [middleware.apiKey, routes.resource.get]);\n\n```\n\n### authorization\n\nIf your API requires authentication then you should be using the authorization middleware. This middleware ensures that the `authorization` header is supplied. If it is not then a failed response will be returned.\n\n```\nvar bridgetownApi = require('bridgetown-api'),\n    middleware = bridgetownApi.middleware;\n\napp.get('/resource', [middleware.authorization, routes.resource.get]);\n\n```\n\n### authToken\n\nThe auth token middleware would typically be paired up with the authorization middleware. You would supply a validation method to the library and if the token is valid the next middleware would be called, if not then an error would get sent back.\n\n```\nvar bridgetownApi = require('bridgetown-api'),\n    middleware = bridgetownApi.middleware,\n    q = require('q');\n\nfunction validateToken(apiKey){\n    var deferred = q.defer();\n\n    ...Your code to validate the token should go here...\n\n    return deferred.promise;\n}\n\nbridgetownApi.configure(function(){\n    this.validate.token(validateToken);\n});\n\napp.get('/resource', [middleware.authToken, routes.resource.get]);\n\n```\n\n\n### Combinations\n\nThe really great thing about these middlewares is that they can be used to create as secure of an API as you like. If you wanted to require and apiKey, authorization and authToken validation then the route definition would look like this.\n\n\n```\nvar bridgetownApi = require('bridgetown-api'),\n    middleware = bridgetownApi.middleware;\n\napp.get('/resource', [middleware.apiKey, middleware.authorization, middleware.authToken, routes.resource.get]);\n\n```\n\n\n### Validation Methods\n\nValidation methods are injected in the `.configure()` function call. There are no callbacks for these methods, they require the use of promises, we typically use the `q` node module to support this functionality. To read more about `q` and promises [https://github.com/kriskowal/q/wiki/API-Reference](Click Here).\n\n------------------------------------------------------------------------------------------\n\n## Responses\n\nAPI responses can be pure insanity, there is no one standard and it seems that everyone does it differently. Since there is no right answer on how to handle responses, the most important thing is to be consistent. If you build lots of apps you want to come up with a response structure that you can use every time.\n\n\nTo return a response you will send the bridgetown Response module your HttpResponse object and use it's `write` method.\n\n```\nvar Response = require('bridgetown-api').Response,\n    response = new Response(httpResponse);\n\nresponse.write(code, message);\n```\n\n\n* On Success\n\nHTTP Status 200\n\n```\n{\n    ...your data...\n}\n```\n\n* On Error\n\nHTTP Status <Error Code>\n\n```\n{\n    code: code,\n    status: \"error\",\n    message: \"Useful Error Message\"\n}\n```\n\nThere are many ways to write out various default errors.\n\n```\nvar err = new Error({Your error message});\nerr.errorCode = Response.statusCodes.{appropriate code};\nresponse.writeError(err);\n```\n\nOr any of these\n\n```\nresponse.writeUnauthorized();\nresponse.writeForbidden();\nresponse.writeNotFound();\nresponse.writeTimeout();\nresponse.writeBadRequest();\nresponse.writeServerError();\nresponse.writeServiceUnavailable();\n```\n\n## Logging\n\nWe know debugging is important, so by default we added a VERY basic logger that prints to the console when the api is in `debug` mode.\n\nYou can turn on `debug` mode in the configure method.\n\n```\nbridgetownApi.configure(function(){\n    this.debug = true;\n    ... your other config code...\n});\n```\n\nThis logger is purposefully very simple, there are a ton of really good loggers out there and you are free to use any that you like. They just need to implment a `debug` few method. Many loggers out there support 'debug', 'info', 'trace', 'error', 'warn', etc so this should be pretty standard.\n\nTo use a custom logger you could do this using the following code.\n\n```\nvar bridgetownApi = require('bridgetown-api'),\n    //Chose solid logger as our custom logger.\n    logger = require('solid-logger-js').init({\n       adapters: [{\n           type: \"console\",\n           application: 'grasshopper-api',\n           machine: 'dev-server'\n       }]\n    });\n\nbridgetownApi.configure(function(){\n    this.debug = true;\n    this.useLogger(logger);\n});\n```\n\nThat's it. Should use the logger that you pass in instead of the default. This is beneficial so that you can write to the console, file, database or whatever your module supports.\n\n\n## Running Tests\n\nFork git repo, then:\n\n* npm install\n* npm install -g grunt-cli\n* npm install -g mocha\n\n`grunt test` runs the tests.\n\n\n## Contributors (`git shortlog -s -n`)\n\n[https://github.com/Solid-Interactive/bridgetown-api-js/graphs/contributors](https://github.com/Solid-Interactive/bridgetown-api-js/graphs/contributors)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Solid Interactive - Travis McHattie\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md"
}
